// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SGRHClient is the client API for SGRH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SGRHClient interface {
	AdicionarColaborador(ctx context.Context, in *AddColaboradorRequest, opts ...grpc.CallOption) (*SGRHResponse, error)
	DemitirColaborador(ctx context.Context, in *DemitirColaboradorRequest, opts ...grpc.CallOption) (*SGRHResponse, error)
	ListarColaboradores(ctx context.Context, in *ListarColaboradoresRequest, opts ...grpc.CallOption) (*ListarColaboradoresResponse, error)
	CalcularFolhaSalarial(ctx context.Context, in *CalcularFolhaSalarialRequest, opts ...grpc.CallOption) (*CalcularFolhaSalarialResponse, error)
}

type sGRHClient struct {
	cc grpc.ClientConnInterface
}

func NewSGRHClient(cc grpc.ClientConnInterface) SGRHClient {
	return &sGRHClient{cc}
}

func (c *sGRHClient) AdicionarColaborador(ctx context.Context, in *AddColaboradorRequest, opts ...grpc.CallOption) (*SGRHResponse, error) {
	out := new(SGRHResponse)
	err := c.cc.Invoke(ctx, "/proto.SGRH/AdicionarColaborador", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sGRHClient) DemitirColaborador(ctx context.Context, in *DemitirColaboradorRequest, opts ...grpc.CallOption) (*SGRHResponse, error) {
	out := new(SGRHResponse)
	err := c.cc.Invoke(ctx, "/proto.SGRH/DemitirColaborador", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sGRHClient) ListarColaboradores(ctx context.Context, in *ListarColaboradoresRequest, opts ...grpc.CallOption) (*ListarColaboradoresResponse, error) {
	out := new(ListarColaboradoresResponse)
	err := c.cc.Invoke(ctx, "/proto.SGRH/ListarColaboradores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sGRHClient) CalcularFolhaSalarial(ctx context.Context, in *CalcularFolhaSalarialRequest, opts ...grpc.CallOption) (*CalcularFolhaSalarialResponse, error) {
	out := new(CalcularFolhaSalarialResponse)
	err := c.cc.Invoke(ctx, "/proto.SGRH/CalcularFolhaSalarial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SGRHServer is the server API for SGRH service.
// All implementations must embed UnimplementedSGRHServer
// for forward compatibility
type SGRHServer interface {
	AdicionarColaborador(context.Context, *AddColaboradorRequest) (*SGRHResponse, error)
	DemitirColaborador(context.Context, *DemitirColaboradorRequest) (*SGRHResponse, error)
	ListarColaboradores(context.Context, *ListarColaboradoresRequest) (*ListarColaboradoresResponse, error)
	CalcularFolhaSalarial(context.Context, *CalcularFolhaSalarialRequest) (*CalcularFolhaSalarialResponse, error)
	mustEmbedUnimplementedSGRHServer()
}

// UnimplementedSGRHServer must be embedded to have forward compatible implementations.
type UnimplementedSGRHServer struct {
}

func (UnimplementedSGRHServer) AdicionarColaborador(context.Context, *AddColaboradorRequest) (*SGRHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdicionarColaborador not implemented")
}
func (UnimplementedSGRHServer) DemitirColaborador(context.Context, *DemitirColaboradorRequest) (*SGRHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemitirColaborador not implemented")
}
func (UnimplementedSGRHServer) ListarColaboradores(context.Context, *ListarColaboradoresRequest) (*ListarColaboradoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarColaboradores not implemented")
}
func (UnimplementedSGRHServer) CalcularFolhaSalarial(context.Context, *CalcularFolhaSalarialRequest) (*CalcularFolhaSalarialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcularFolhaSalarial not implemented")
}
func (UnimplementedSGRHServer) mustEmbedUnimplementedSGRHServer() {}

// UnsafeSGRHServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SGRHServer will
// result in compilation errors.
type UnsafeSGRHServer interface {
	mustEmbedUnimplementedSGRHServer()
}

func RegisterSGRHServer(s grpc.ServiceRegistrar, srv SGRHServer) {
	s.RegisterService(&SGRH_ServiceDesc, srv)
}

func _SGRH_AdicionarColaborador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddColaboradorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGRHServer).AdicionarColaborador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SGRH/AdicionarColaborador",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGRHServer).AdicionarColaborador(ctx, req.(*AddColaboradorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SGRH_DemitirColaborador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemitirColaboradorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGRHServer).DemitirColaborador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SGRH/DemitirColaborador",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGRHServer).DemitirColaborador(ctx, req.(*DemitirColaboradorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SGRH_ListarColaboradores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListarColaboradoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGRHServer).ListarColaboradores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SGRH/ListarColaboradores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGRHServer).ListarColaboradores(ctx, req.(*ListarColaboradoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SGRH_CalcularFolhaSalarial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcularFolhaSalarialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGRHServer).CalcularFolhaSalarial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SGRH/CalcularFolhaSalarial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGRHServer).CalcularFolhaSalarial(ctx, req.(*CalcularFolhaSalarialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SGRH_ServiceDesc is the grpc.ServiceDesc for SGRH service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SGRH_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SGRH",
	HandlerType: (*SGRHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdicionarColaborador",
			Handler:    _SGRH_AdicionarColaborador_Handler,
		},
		{
			MethodName: "DemitirColaborador",
			Handler:    _SGRH_DemitirColaborador_Handler,
		},
		{
			MethodName: "ListarColaboradores",
			Handler:    _SGRH_ListarColaboradores_Handler,
		},
		{
			MethodName: "CalcularFolhaSalarial",
			Handler:    _SGRH_CalcularFolhaSalarial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sgrh.proto",
}
